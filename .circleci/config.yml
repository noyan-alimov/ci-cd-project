version: 2.1


commands:
  install-dependencies:
    parameters:
      layer:
        type: string
    steps:
      - run: 
          name: Install << parameters.layer >> dependencies
          command: |
            cd << parameters.layer >>
            npm i
      - slack/notify-on-failure

  destroy-environment:
    steps:
      - run:
          name: Destroy backend environment
          command: |
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID}
          when: on_fail
      - run:
          name: Destroy frontend environment
          command: |
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID}
          when: on_fail

  revert-migrations:
    steps:
      - run:
          name: Revert database migration if it has already ran
          command: |
            if grep -q "true" /tmp/workspace/migrations-ran.txt 
            then 
              cd backend
              npm run migrations:revert
            else 
              echo "no revert migration needed"
            fi
          when: on_fail


orbs:
  slack: circleci/slack@3.4.2
  aws-cli: circleci/aws-cli@1.3.0


jobs:
  build-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - install-dependencies:
          layer: "frontend"
      - run:
          name: Build Frontend
          command: |
            cd frontend
            npm run build
      - slack/notify-on-failure

  build-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - install-dependencies:
          layer: "backend"
      - run:
          name: Build backend
          command: |
            cd backend
            npm run build
      - run:
          name: Copy compiled backend for future use in ansible
          command: |
            mkdir /tmp/workspace
            cp ./backend/package.json /tmp/workspace/
            cd backend/dist
            tar -zcvf /tmp/workspace/backend.tar.gz ./
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - backend.tar.gz
            - package.json
      - slack/notify-on-failure

  # test-frontend:
  #   docker:
  #     - image: circleci/node
  #   steps:
  #     - checkout
  #     - install-dependencies:
  #         layer: "frontend"
  #     - run:
  #         name: Unit test frontend
  #         command: |
  #           cd frontend
  #           mkdir -p ./reports/junit/
  #           npm install --save-dev jest-junit jest-junit-reporter
  #           ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
  #         environment:
  #           JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
  #     - store_test_results:
  #         path: ./frontend/reports/junit/
  #     - slack/notify-on-failure

  # test-backend:
  #   docker:
  #     - image: circleci/node
  #   steps:
  #     - checkout
  #     - install-dependencies:
  #         layer: "backend"
  #     - run:
  #         name: Unit test backend
  #         command: |
  #           cd backend
  #           mkdir -p ./reports/junit/
  #           npm install --save-dev jest-junit jest-junit-reporter
  #           ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
  #         environment:
  #           JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
  #     - store_test_results:
  #         path: ./backend/reports/junit/
  #     - slack/notify-on-failure
  
  # scan-frontend:
  #   docker:
  #     - image: circleci/node
  #   steps:
  #     - checkout
  #     - install-dependencies:
  #         layer: "frontend"
  #     - run:
  #         name: Analyze frontend
  #         command: |
  #           cd frontend
  #           npm audit fix --audit-level=critical
  #     - slack/notify-on-failure

  scan-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - install-dependencies:
          layer: "backend"
      - run:
          name: Analyze backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack/notify-on-failure

  create-infrastructure-backend:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Create backend infrastructure
          command: |
            cd .circleci/files
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="backend-deployment-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udacity
      - run:
          name: Save backend instance public url
          command: |
            mkdir /tmp/workspace
            aws ec2 describe-instances --filters "Name=tag:project,Values=udacity" \
              --query "Reservations[*].Instances[*].[PublicDnsName]" \
              --output text > /tmp/workspace/backend_url.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - backend_url.txt
      - run:
          name: describe events on failure
          command: |
            aws cloudformation describe-stack-events --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail

  create-infrastructure-frontend:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - run: mkdir /tmp/workspace
      - run:
          name: Save old bucket arn
          command: echo "arn:aws:s3:::`aws s3 ls | awk '{ print $3 } ' | grep udapeople-frontend-deployment`" > /tmp/workspace/old_s3arn.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - old_s3arn.txt
      - run:
          name: Create frontend infrastructure
          command: |
            cd .circleci/files
            aws cloudformation deploy --template-file frontend.yml \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="frontend-deployment-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udacity
      - run:
          name: describe events on failure
          command: |
            aws cloudformation describe-stack-events --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail
          
  configure-infrastructure-and-deploy-backend:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d1:66:b0:16:41:57:af:82:cc:c8:ee:b5:68:ef:52:d6"]
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install ansible and playbook dependencies
          command: |
            apk add --update ansible
            ansible-galaxy install weareinteractive.environment
      - run:
          name: Create ansible inventory
          command: |
            echo "[backend]" > .circleci/ansible/inventory.txt
            cat /tmp/workspace/backend_url.txt >> .circleci/ansible/inventory.txt
            echo .circleci/ansible/inventory.txt
      - run:
          name: Run ansible playbook
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt playbook.yml
            
  run-migrations:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - install-dependencies:
          layer: "backend"
      - run:
          name: Migrate db
          command: |
            cd backend
            npm run migrations
      - run:
          name: Take note that migrations ran
          command: |
            mkdir /tmp/workspace
            echo "true" > /tmp/workspace/migrations-ran.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - migrations-ran.txt
      - slack/notify-on-failure

  prepare-frontend:
    docker:
      - image: cimg/node:lts
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - install-dependencies:
          layer: "frontend"
      - run:
          name: Build Frontend
          command: |
            export API_URL=http://`cat /tmp/workspace/backend_url.txt`:3030
            cd frontend            
            npm run build
      - run:
          name: save front build
          command: |
            cd frontend/dist
            tar -zcvf /tmp/workspace/frontend.tar.gz ./
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - frontend.tar.gz
      - slack/notify-on-failure
    
  deploy-frontend:
    executor: aws-cli/default
    steps:
      - aws-cli/setup:
          profile-name: default
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: decompress frontend
          command: |
            echo `ls /tmp/workspace`
            mkdir ~/frontend
            cp /tmp/workspace/frontend.tar.gz ~/frontend
            cd ~/frontend
            tar -zxvf frontend.tar.gz
            echo `ls -la`
      - run:
          name: deploy to s3 bucket
          command: |
            cd ~/frontend
            aws s3 sync . s3://udapeople-frontend-deployment-${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test-backend:
    executor: aws-cli/default
    docker:
      - image: alpine:latest
    steps:
      - aws-cli/setup:
          profile-name: default
      - attach_workspace:
          at: /tmp/workspace
      - run: apk add curl
      - run: 
          name: smoke test backend
          command: |
            BACKEND_URL=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text)
            curl "http://${BACKEND_URL}:3030/api/status"
      - destroy-environment
      - revert-migrations

  smoke-test-frontend:
    executor: aws-cli/default
    docker:
      - image: alpine:latest
    steps:
      - aws-cli/setup:
          profile-name: default
      - attach_workspace:
          at: /tmp/workspace
      - run: apk add curl
      - run:
          name: smoke test frontend
          command: |
            URL="http://udapeople-frontend-deployment-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-eu-west-2.amazonaws.com/#/employees"              
            if curl -s ${URL} | grep "Welcome"; then return 0; else return 1 ; fi
      - destroy-environment
      - revert-migrations

#  cloudfront-update:

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend
      # - test-backend
      # - scan-frontend
      - scan-backend
      - create-infrastructure-backend:
          requires:
            - build-frontend
            - build-backend
            # - test-frontend
            # - test-backend
            # - scan-frontend
            - scan-backend
      - create-infrastructure-frontend:
          requires:
            - build-frontend
            - build-backend
            # - test-frontend
            # - test-backend
            # - scan-frontend
            - scan-backend
      - configure-infrastructure-and-deploy-backend:
          requires:
            - create-infrastructure-backend
            - create-infrastructure-frontend
      - run-migrations:
          requires:
            - configure-infrastructure-and-deploy-backend
      - prepare-frontend:
          requires:
            - run-migrations
      - deploy-frontend:
          requires:
            - prepare-frontend
      - smoke-test-backend:
          requires:
            - deploy-frontend
      - smoke-test-frontend:
          requires:
            - deploy-frontend
