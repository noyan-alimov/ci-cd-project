version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

commands:
  install-dependencies:
    parameters:
      layer:
        type: string
    steps:
      - run: 
          name: Install << parameters.layer >> dependencies
          command: |
            cd << parameters.layer >>
            npm i
      - slack/notify-on-failure

#   destroy-environment:
#     description: Destroy backend and frontend cloudformation stacks given a workflow ID.
#     ...

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...

orbs:
  slack: circleci/slack@3.4.2


jobs:
  build-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - install-dependencies:
          layer: "frontend"
      - run:
          name: Build Frontend
          command: |
            cd frontend
            npm run build
      - slack/notify-on-failure

  build-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - install-dependencies:
          layer: "backend"
      - run:
          name: Build backend
          command: |
            cd backend
            npm run build
      - slack/notify-on-failure

  test-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - install-dependencies:
          layer: "frontend"
      - run:
          name: Unit test frontend
          command: |
            cd frontend
            mkdir -p ./reports/junit/
            npm install --save-dev jest-junit jest-junit-reporter
            ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
      - store_test_results:
          path: ./frontend/reports/junit/
      - slack/notify-on-failure

  test-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - install-dependencies:
          layer: "backend"
      - run:
          name: Unit test backend
          command: |
            cd backend
            mkdir -p ./reports/junit/
            npm install --save-dev jest-junit jest-junit-reporter
            ./node_modules/.bin/jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: "./reports/junit/"
      - store_test_results:
          path: ./backend/reports/junit/
      - slack/notify-on-failure
  
  scan-frontend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - install-dependencies:
          layer: "frontend"
      - run:
          name: Analyze frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - slack/notify-on-failure

  scan-backend:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - install-dependencies:
          layer: "backend"
      - run:
          name: Analyze backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack/notify-on-failure

  create-infrastructure-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create backend infrastructure
          command: |
            cd ./circleci/files
            aws cloudformation deploy \
              --template-file backend.yml
              --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="backend-deployment-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udacity
      - run:
          name: Save backend instance public url
          command: |
            mkdir /tmp/workspace
            aws ec2 describe-instances --filters "Name=tag:project,Values=udacity" \
              --query "Reservations[*].Instances[*].[PublicDnsName]" \
              --output text > /tmp/workspace/backend_url.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - backend_url.txt
      - run:
          name: describe events on failure
          command: |
            aws cloudformation describe-stack-events --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail

  create-infrastructure-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: mkdir /tmp/workspace
      - run:
          name: Save old bucket arn
          command: echo "arn:aws:s3:::`aws s3 ls | awk '{ print $3 } ' | grep udapeople-frontend-deployment`" > /tmp/workspace/old_s3arn.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - old_s3arn.txt
      - run:
          name: Create frontend infrastructure
          command: |
            cd ./circleci/files
            aws cloudformation deploy --template-file frontend.yml \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="frontend-deployment-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udacity
      - run:
          name: describe events on failure
          command: |
            aws cloudformation describe-stack-events --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail
          
  configure-infrastructure-backend:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["37:17:a8:70:7e:f8:d1:af:e2:5c:8c:4d:5f:26:46:77"]
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install ansible and playbook dependencies
          command: |
            apk add --update ansible
            ansible-galaxy install weareinteractive.environment
      - run:
          name: Create ansible inventory
          command: |
            echo "[backend]" > ./circleci/ansible/inventory.txt
            cat /tmp/workspace/backend_url.txt >> .circleci/ansible/inventory.txt
            echo ./circleci/ansible/inventory.txt
      - run:
          name: Run ansible playbook
          command: |
            cd ./circleci/ansible
            ansible-playbook -i inventory.txt playbook.yml

#  run-migrations:

#  deploy-frontend:

#  deploy-backend:  

#  smoke-test:

#  cloudfront-update:

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend
      - test-backend
      - scan-frontend
      - scan-backend
      - create-infrastructure-backend:
          requires:
            - build-frontend
            - build-backend
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
      - create-infrastructure-frontend:
          requires:
            - build-frontend
            - build-backend
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
      - configure-infrastructure-backend:
          requires:
            - create-infrastructure-backend
            - create-infrastructure-frontend
